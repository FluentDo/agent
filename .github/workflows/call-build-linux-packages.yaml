---
name: Generate Linux packages
on:
  workflow_call:
    inputs:
      target-matrix:
        description: The build matrix of targets as a JSON build matrix.
        required: true
        type: string
      ref:
        description: The commit, SHA or branch to use in this repository.
        required: false
        type: string
        default: main
      nightly-build-info:
        description: Any special information to add to the nightly build information string.
        required: false
        type: string
        default: ""
jobs:
  build-packages:
    name: agent - ${{ matrix.distro }} package build and upload
    runs-on: ${{ (contains(matrix.distro, 'arm') && 'self-ubuntu-latest-arm') || 'self-ubuntu-latest' }}
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        distro: ${{ fromJson(inputs.target-matrix) }}
    steps:
      - name: Checkout ${{ inputs.ref }} code
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
          repository: FluentDo/agent

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Format the matrix string
        uses: frabert/replace-string-action@v2.5
        id: formatted_distro
        with:
          pattern: '(.*)\/(.*)$'
          string: "${{ matrix.distro }}"
          replace-with: "$1-$2"
          flags: "g"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Log in to the GHCR registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Use the upstream packaging script to keep consistent and up-to-date
      - name: ${{ matrix.distro }} artefacts
        run: |
          rm -rf source/packaging/packages/${{ matrix.distro }}/agent/
          set
          chmod +x ./build.sh
          ./build.sh
        env:
          FLB_DISTRO: ${{ matrix.distro }}
          FLB_OUT_DIR: agent
          FLB_NIGHTLY_BUILD: ${{ inputs.nightly-build-info }}

          # Ensure we do not use any defaults from upstream, use our hardened config.
          FLB_IN_CALYPTIA_FLEET: Off
          FLB_IN_DOCKER: Off
          FLB_IN_DOCKER_EVENTS: Off
          FLB_IN_EXEC_WASI: Off
          FLB_IN_MQTT: Off
          FLB_IN_NETIF: Off
          FLB_IN_NGINX_EXPORTER_METRICS: Off
          FLB_IN_SERIAL: Off
          FLB_IN_THERMAL: Off
          FLB_FILTER_ALTER_SIZE: Off
          FLB_FILTER_CHECKLIST: Off
          FLB_FILTER_GEOIP2: Off
          FLB_FILTER_NIGHTFALL: Off
          FLB_FILTER_WASM: Off
          FLB_OUT_CALYPTIA: Off
          FLB_OUT_LOGDNA: Off
          FLB_OUT_PGSQL: Off
          FLB_OUT_TD: Off
          FLB_OUT_VIVO_EXPORTER: Off

          FLB_STREAM_PROCESSOR: Off
          FLB_WASM: Off
          FLB_ZIG: Off
          FLB_PROXY_GO: Off
          FLB_SHARED_LIB: Off
          FLB_EXAMPLES: Off
          FLB_RELEASE: On
          FLB_SIMD: On
          FLB_TRACE: Off
          FLB_CHUNK_TRACE: Off
        working-directory: source/packaging
        shell: bash

      # Create a workflow artefact using the contents of the distribution directory.
      # package-centos-7
      #
      # We also want this package to be the root directory so remove any extra nesting:
      # e.g. for centos/7 + standard we include everything from 'source/packaging/packages/centos/7/'
      - name: Upload the ${{ matrix.distro }} artefacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ steps.formatted_distro.outputs.replaced }}
          path: |
            source/packaging/packages/${{ matrix.distro }}/agent
          if-no-files-found: error

      - name: List packages
        continue-on-error: false
        run: ls -lR source/packaging/packages/${{ matrix.distro }}/agent
        shell: bash

      - name: List DEB package dependencies
        continue-on-error: false
        run: find source/packaging/packages/ -type f -name '*.deb' -exec sh -c 'i="$1";echo "$i";dpkg -I "$i"' shell {} \;
        shell: bash

      - name: List RPM package dependencies
        continue-on-error: false
        run: find source/packaging/packages/ -type f -name '*.rpm' -exec sh -c 'i="$1";echo "$i";docker run --rm -t -v "$PWD/$i":/test.rpm:ro registry.access.redhat.com/ubi9:9.4 yum -q deplist /test.rpm' shell {} \;
        shell: bash
