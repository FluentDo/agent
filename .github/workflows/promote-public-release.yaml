name: Promote an internal release to a public release
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: The nominated Github Release version and tag (i.e. `vx.x.x`) we are promoting.
        type: string
        required: true
      dry-run:
        description: Dry-run the workflow without making any changes.
        type: boolean
        required: false
        default: true
env:
  SOURCE_REPO: "fluentdo/agent"
  DESTINATION_REPO: "fluentdo/releases"
jobs:
  get-release-info:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      semver: ${{ steps.get-release-info.outputs.semver }}
      tag-name: ${{ steps.get-metadata.outputs.tagName }}
    steps:
      - name: Get release info
        id: get-metadata
        run: |
          # Get the latest release info from the repository
          gh release view ${{ github.event.inputs.release-version }} --repo "$SOURCE_REPO" --json tagName,createdAt,body
          RELEASE_INFO=$(gh release view ${{ github.event.inputs.release-version }} --repo "$SOURCE_REPO" --json tagName,createdAt,body)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert version to numeric semver
        id: get-release-info
        run: |
          # Convert the tag name to a numeric semver format
          SEMVER=$(echo "${{ github.event.inputs.release-version }}" | sed 's/^v//')
          echo "semver=$SEMVER"
          echo "semver=$SEMVER" >> $GITHUB_OUTPUT
        shell: bash

  promote-release:
    runs-on: ubuntu-latest
    name: Promote a release to the public registry and create a public release
    needs:
      - get-release-info
    permissions:
      packages: read
      id-token: write
    env:
      SOURCE_IMAGE: "ghcr.io/fluentdo/agent:${{ needs.get-release-info.outputs.semver }}"
      DESTINATION_IMAGE: "ghcr.io/fluentdo/releases/agent:${{ needs.get-release-info.outputs.semver }}"
    steps:
      - name: Authenticate with GCP
        uses: google-github-actions/auth@v3
        with:
          workload_identity_provider: "projects/841522437311/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "terraform-infra@infrastructure-464010.iam.gserviceaccount.com"
          create_credentials_file: true
          export_environment_variables: true

      - id: get-secrets
        name: Get secrets from GCP Secret Manager
        # This step retrieves secrets from GCP Secret Manager and sets them as outputs
        # The secrets can then be accessed in subsequent steps using ${{ steps.get-secrets.outputs.<secret_name> }}
        uses: "google-github-actions/get-secretmanager-secrets@v3"
        with:
          secrets: |-
            github-pat:projects/626836145334/secrets/GITHUB_CI_PAT

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Primarily because the skopeo errors are hard to parse and non-obvious
      - name: Check the image exists
        run: |
          docker pull "$SOURCE_IMAGE"
        shell: bash

      # Use the container to prevent any rootless issues or problems with old packages for it
      - name: Copy container images from private to public registry
        if: ${{ !github.event.inputs.dry-run }}
        run: |
          docker run --rm  \
            quay.io/skopeo/stable:latest \
            copy \
              --all \
              --retry-times 10 \
              --src-creds '${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}' \
              --dest-creds '${{ github.actor }}:${{ steps.get-secrets.outputs.github-pat }}' \
              "docker://$SOURCE_IMAGE" \
              "docker://$DESTINATION_IMAGE"
        shell: bash

      # Checkout the output repository
      - uses: actions/checkout@v5
        with:
          repository: ${{ env.DESTINATION_REPO }}

      - name: Get binaries
        run: |
          mkdir -p release-binaries
          cd release-binaries
          gh release download '${{ github.event.inputs.release-version }}' --repo "$SOURCE_REPO"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug - all binaries
        run: |
          git diff
          ls -lR release-binaries/
        shell: bash

      - name: Construct release body
        run: |
          echo '' > body.txt
          echo "Image: $DESTINATION_IMAGE" >> body.txt
          echo '' >> body.txt
          echo "Targets:" >> body.txt
          echo '' >> body.txt

          jq '.linux_targets' release-binaries/build-config.json > targets.txt
          sed -i '/\[/d' targets.txt
          sed -i '/\]/d' targets.txt
          sed -i 's/^  "/- `/g' targets.txt
          sed -i 's/",/`/g' targets.txt

          cat targets.txt >> body.txt
          rm -f targets.txt

          cat body.txt
        shell: bash

      - name: Remove unnecessary files
        run: rm -f release-binaries/*.json release-binaries/*.txt
        shell: bash

      - name: Debug - release binaries
        run: |
          ls -lR release-binaries/
        shell: bash

      - name: Create release in destination repository
        if: ${{ !inputs.dry-run }}
        # This may fail for workflow_dispatch if the release already exists
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.DESTINATION_REPO }}
          body_path: body.txt
          append_body: false
          files: |
            release-binaries/**/*
          fail_on_unmatched_files: false
          generate_release_notes: false
          token: ${{ steps.get-secrets.outputs.github-pat }}
          tag_name: ${{ inputs.release-version }}
          make_latest: true
